<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天青丶</title>
  
  <subtitle>The world has changed, and we must change with it</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tianqingdian.github.io/"/>
  <updated>2017-12-22T02:56:00.233Z</updated>
  <id>https://tianqingdian.github.io/</id>
  
  <author>
    <name>天青丶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jquery插件实现分页</title>
    <link href="https://tianqingdian.github.io//blogs/year/12/22/Jquery%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/"/>
    <id>https://tianqingdian.github.io//blogs/year/12/22/Jquery插件实现分页/</id>
    <published>2017-12-22T02:05:26.000Z</published>
    <updated>2017-12-22T02:56:00.233Z</updated>
    
    <content type="html"><![CDATA[<p> 这篇文章详细地介绍了前端的Jquery插件如何实现分页，需要的朋友可以参考下！<br><a id="more"></a></p><h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h3><p>page.css</p><pre><code>.page{    padding-left: 0;      text-align: center;      list-style: none;    }    .page&gt;li{    display: inline;    padding: 5px 10px;    cursor: pointer;    }    .page .pageItem{    border: solid thin #DDDDDD;    margin: 5px;    }    .page .pageItemActive{    border: solid thin #0099FF;    margin: 5px;    background-color: #0099FF;    color:white;    }    .page .pageItem:hover{    border: solid thin #0099FF;    background-color: #0099FF;    color:white;    }    .page .pageItemDisable{    border: solid thin #DDDDDD;    margin: 5px;    background-color: #DDDDDD;    }</code></pre><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p>page.js</p><pre><code>var page = {    &quot;pageId&quot; : &quot;&quot;,    &quot;data&quot; : null,    &quot;maxshowpageitem&quot; : 5,//最多显示的页码个数    &quot;pagelistcount&quot; : 10,//每一页显示的内容条数    &quot;init&quot; : function(listCount, currentPage, options) {        this.pageId = options.id,        this.data = options.data,        this.maxshowpageitem = options.maxshowpageitem, //最多显示的页码个数        this.pagelistcount = options.pagelistcount//每一页显示的内容条数        page.initPage(listCount, currentPage);    },    /**     * 初始化数据处理     * @param listCount 列表总量      * @param currentPage 当前页     */    &quot;initPage&quot; : function(listCount, currentPage) {        var maxshowpageitem = page.maxshowpageitem;        if (maxshowpageitem != null &amp;&amp; maxshowpageitem &gt; 0 &amp;&amp; maxshowpageitem != &quot;&quot;) {            page.maxshowpageitem = maxshowpageitem;        }        var pagelistcount = page.pagelistcount;        if (pagelistcount != null &amp;&amp; pagelistcount &gt; 0 &amp;&amp; pagelistcount != &quot;&quot;) {            page.pagelistcount = pagelistcount;        }        page.pagelistcount = pagelistcount;        if (listCount &lt; 0) {            listCount = 0;        }        if (currentPage &lt;= 0) {            currentPage = 1;        }        page.setPageListCount(listCount, currentPage);    },    /**     * 初始化分页界面     * @param listCount 列表总量     */    &quot;initWithUl&quot; : function(listCount, currentPage) {        var pageCount = 1;        if (listCount &gt;= 0) {            var pageCount = listCount % page.pagelistcount &gt; 0                ? parseInt(listCount / page.pagelistcount) + 1                : parseInt(listCount / page.pagelistcount);        }        var appendStr = page.getPageListModel(pageCount, currentPage);        $(&quot;#&quot; + page.pageId).html(appendStr);    },    /**     * 设置列表总量和当前页码     * @param listCount 列表总量     * @param currentPage 当前页码     */    &quot;setPageListCount&quot; : function(listCount, currentPage) {        listCount = parseInt(listCount);        currentPage = parseInt(currentPage);        page.initWithUl(listCount, currentPage);        page.initPageEvent(listCount);        page.viewPage(currentPage, listCount, page.pagelistcount, page.data)    },    //页面显示功能        &quot;viewPage&quot; : function(currentPage, listCount, pagelistcount, data) {        var NUM = listCount % pagelistcount == 0            ? listCount / pagelistcount            : parseInt(listCount / pagelistcount) + 1;        if (currentPage == NUM) {            var result = data.slice((currentPage - 1) * pagelistcount,data.length);        } else {            var result = data.slice((currentPage - 1) * pagelistcount,                (currentPage - 1) * pagelistcount + pagelistcount);        }        options.callBack(result);    },    &quot;initPageEvent&quot; : function(listCount) {        $(&quot;#&quot; + page.pageId + &quot;&gt;li[class=&apos;pageItem&apos;]&quot;).on(&quot;click&quot;, function() {            page.setPageListCount(listCount, $(this).attr(&quot;page-data&quot;),                page.fun);        });    },    &quot;getPageListModel&quot; : function(pageCount, currentPage) {        var prePage = currentPage - 1;        var nextPage = currentPage + 1;        var prePageClass = &quot;pageItem&quot;;        var nextPageClass = &quot;pageItem&quot;;        if (prePage &lt;= 0) {            prePageClass = &quot;pageItemDisable&quot;;        }        if (nextPage &gt; pageCount) {            nextPageClass = &quot;pageItemDisable&quot;;        }        var appendStr = &quot;&quot;;        appendStr += &quot;&lt;li class=&apos;&quot; + prePageClass            + &quot;&apos; page-data=&apos;1&apos; page-rel=&apos;firstpage&apos;&gt;首页&lt;/li&gt;&quot;;        appendStr += &quot;&lt;li class=&apos;&quot; + prePageClass + &quot;&apos; page-data=&apos;&quot; + prePage            + &quot;&apos; page-rel=&apos;prepage&apos;&gt;&amp;lt;上一页&lt;/li&gt;&quot;;        var miniPageNumber = 1;        if (currentPage - parseInt(page.maxshowpageitem / 2) &gt; 0            &amp;&amp; currentPage + parseInt(page.maxshowpageitem / 2) &lt;= pageCount{            miniPageNumber = currentPage - parseInt(page.maxshowpageitem / 2);        } else if (currentPage - parseInt(page.maxshowpageitem / 2) &gt; 0            &amp;&amp; currentPage + parseInt(page.maxshowpageitem / 2) &gt; pageCount) {            miniPageNumber = pageCount - page.maxshowpageitem + 1;            if (miniPageNumber &lt;= 0) {                miniPageNumber = 1;            }        }        var showPageNum = parseInt(page.maxshowpageitem);        if (pageCount &lt; showPageNum) {            showPageNum = pageCount;        }        for (var i = 0; i &lt; showPageNum; i++) {            var pageNumber = miniPageNumber++;            var itemPageClass = &quot;pageItem&quot;;            if (pageNumber == currentPage) {                itemPageClass = &quot;pageItemActive&quot;;            }            appendStr += &quot;&lt;li class=&apos;&quot; + itemPageClass + &quot;&apos; page-data=&apos;&quot;                + pageNumber + &quot;&apos; page-rel=&apos;itempage&apos;&gt;&quot; + pageNumber                + &quot;&lt;/li&gt;&quot;;        }        appendStr += &quot;&lt;li class=&apos;&quot; + nextPageClass + &quot;&apos; page-data=&apos;&quot; + nextPage            + &quot;&apos; page-rel=&apos;nextpage&apos;&gt;下一页&amp;gt;&lt;/li&gt;&quot;;        appendStr += &quot;&lt;li class=&apos;&quot; + nextPageClass + &quot;&apos; page-data=&apos;&quot;            + pageCount + &quot;&apos; page-rel=&apos;lastpage&apos;&gt;尾页&lt;/li&gt;&quot;;        return appendStr;    }}</code></pre><h3 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h3><p>page.html    </p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;ECharts&lt;/title&gt;&lt;!-- 引入 echarts.js --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/gongchang-style.css&quot; /&gt;&lt;link href=&quot;css/page.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&gt;&lt;script src=&quot;http://www.jq22.com/jquery/jquery-1.10.2.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/page.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/echarts.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;    &lt;div class=&quot;grid-header&quot; id=&quot;grid1&quot;&gt;        &lt;span class=&quot;row-1&quot;&gt;姓名&lt;/span&gt;        &lt;span class=&quot;row-1&quot;&gt;年龄&lt;/span&gt;        &lt;span class=&quot;row-1&quot;&gt;性别&lt;/span&gt;        &lt;span class=&quot;row-1&quot;&gt;手机号码&lt;/span&gt;        &lt;span class=&quot;row-1&quot;&gt;居住地址&lt;/span&gt;    &lt;/div&gt;    &lt;div class=&quot;grid-body&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;!--分页插件--&gt;    &lt;div class=&quot;page&quot; id=&quot;page&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    var options;    /**初始函数     * [initdata description]     * @return {[type]} [description]     */   function initdata(){    alert(&quot;init&quot;);    $.ajax({        type: &quot;get&quot;,        url: &quot;http://localhost:8080/userInfo/getUserInfo&quot;,        success: function(data, textStatus){            alert(data.userInfoList[1].username);            if(data.status == 1){                var datas = data.userInfoList;                alert(datas);                options={                    &quot;id&quot;:&quot;page&quot;,//显示页码的元素                    &quot;data&quot;:datas,//显示数据                    &quot;maxshowpageitem&quot;:5,//最多显示的页码个数                    &quot;pagelistcount&quot;:3,//每页显示数据个数                    &quot;callBack&quot;:function(result){                           alert(result);                        var cHtml=&quot;&quot;;                        for(var i=0;i&lt;result.length;i++){                            cHtml+=&apos;&lt;div class=&quot;grid-item&quot;&gt;\                                &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].username+&apos;&lt;/span&gt;\                                &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].age+&apos;&lt;/span&gt;\                                &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].sex+&apos;&lt;/span&gt;\                                &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].phone+&apos;&lt;/span&gt;\                                &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].address+&apos;&lt;/span&gt;\                            &lt;/div&gt;&apos;                        }                        $(&quot;.grid-body&quot;).html(cHtml);                    }                };                page.init(datas.length,1,options);               }        },        complete: function(XMLHttpRequest, textStatus){        },        error: function(){            alert(&quot;请求网络失败！。。。。。。&quot;);        }    });    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="后台controller"><a href="#后台controller" class="headerlink" title="后台controller"></a>后台controller</h3><pre><code>@RequestMapping(value = &quot;/getUserInfo&quot;, produces = &quot;application/json;charset=utf-8&quot;)public Map&lt;String,Object&gt; getUserInfo(HttpServletResponse response ,  @RequestParam(required=false,defaultValue=&quot;1&quot;) Integer pageNum,  @RequestParam(required=false,defaultValue=&quot;3&quot;) Integer pageSize){    response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);    List&lt;UserInfo&gt; userList = userInfoService.getUserInfo();    Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();    map.put(&quot;userInfoList&quot;,userList);       map.put(&quot;status&quot;,1);    return map;}</code></pre><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><ol><li>后台请求的接口应返回全部的数据（也就是Jquery插件需要的datas数据)</li><li>数据必须是json</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这篇文章详细地介绍了前端的Jquery插件如何实现分页，需要的朋友可以参考下！&lt;br&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://tianqingdian.github.io/categories/HTML/"/>
    
    
      <category term="jquery" scheme="https://tianqingdian.github.io/tags/jquery/"/>
    
      <category term="前端" scheme="https://tianqingdian.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="分页" scheme="https://tianqingdian.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>浏览器后退刷新页面</title>
    <link href="https://tianqingdian.github.io//blogs/year/12/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8E%E9%80%80%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2/"/>
    <id>https://tianqingdian.github.io//blogs/year/12/14/浏览器后退刷新页面/</id>
    <published>2017-12-14T06:35:28.000Z</published>
    <updated>2017-12-22T02:10:38.744Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章介绍了几种浏览器后退按钮强制刷新页面的方法,需要的朋友可以参考下</p><a id="more"></a><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><p>1、 在页面中增加隐藏域 <code>&lt;input type=&quot;hidden&quot; id=&quot;refreshed&quot; value=&quot;no&quot;&gt;</code><br>2、 通过js设置和获取隐藏域值来自动刷新页面</p><pre><code>onload=function(){      var e=document.getElementById(&quot;refreshed&quot;);      if(e.value==&quot;no&quot;)e.value=&quot;yes&quot;;      else{e.value=&quot;no&quot;;location.reload();}      }</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h3><p>不使用隐藏域的js写法：</p><pre><code>if(window.name != &quot;bencalie&quot;){    location.reload();    window.name = &quot;bencalie&quot;;    }else{    window.name = &quot;&quot;;}</code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三:"></a>方法三:</h3><p>禁止HTML头部缓存：</p><pre><code>&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot;&gt;</code></pre><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四:"></a>方法四:</h3><p>jsp设置回退页的头部缓存：</p><pre><code>&lt;%      response.setHeader(&quot;Cache-Control&quot;,&quot;no-store&quot;);      response.setDateHeader(&quot;Expires&quot;, 0);      response.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);   %&gt;  </code></pre><h3 id="方法五"><a href="#方法五" class="headerlink" title="方法五:"></a>方法五:</h3><p>服务器设置头部缓存：</p><pre><code>response.setHeader( &quot;Pragma&quot;, &quot;no-cache&quot; );//不允许浏览器端或缓存服务器缓存当前页面信息。   response.setDateHeader(&quot;Expires&quot;, 0);   response.addHeader( &quot;Cache-Control&quot;, &quot;no-cache&quot; );//浏览器和缓存服务器都不应该缓存页面信息response.addHeader( &quot;Cache-Control&quot;, &quot;no-store&quot; );//请求和响应的信息都不应该被存储在对方的磁盘系统中；    response.addHeader( &quot;Cache-Control&quot;, &quot;must-revalidate&quot; );//于客户机的每次请求，代理服务器必须想服务器验证缓存是否过时</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章介绍了几种浏览器后退按钮强制刷新页面的方法,需要的朋友可以参考下&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://tianqingdian.github.io/categories/HTML/"/>
    
    
      <category term="JS" scheme="https://tianqingdian.github.io/tags/JS/"/>
    
      <category term="刷新" scheme="https://tianqingdian.github.io/tags/%E5%88%B7%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>&lt;input type=image&gt;标签事件自动提交表单</title>
    <link href="https://tianqingdian.github.io//blogs/year/12/13/input-type-image-%E6%A0%87%E7%AD%BE%E4%BA%8B%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95/"/>
    <id>https://tianqingdian.github.io//blogs/year/12/13/input-type-image-标签事件自动提交表单/</id>
    <published>2017-12-13T07:27:43.000Z</published>
    <updated>2017-12-14T05:53:51.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>在下面的情况下点击<code>&lt;input type=image&gt;</code>来会直接提交表单<br><a id="more"></a><br>    <form class="form-login" action="login.html" method="get"><br>        <div class="login-wrap"><br>            <input type="text" class="form-control" placeholder="请输入用户名" autofocus name="name" id="count"> <br><br>            <input type="password" class="form-control" placeholder="请输入密码" name="password" id="password"><br>            验证码:<input type="text" name="pcode" class="form-control" size="5"><br>            <!-- 单击图片可以换下一张 --><br>            <input id="pcode" type="image" src="pcode.html" onclick="code();"><br><br>            <button class="btn btn-theme btn-block" type="button" id="login"><i class="fa fa-lock"></i> 登陆</button><br>        </div><br>    </form></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>可以在<code>&lt;input type=image&gt;</code>标签中添加onclick在事件结束后添加return false；语句如下:<br><code>&lt;input id=&quot;pcode&quot; type=&quot;image&quot; src=&quot;pcode.html&quot; onclick=&quot;code();return false；&quot;&gt;</code></p></li><li><p>如果不是必须要用<code>&lt;input&gt;</code>可以使用<code>&lt;img&gt;</code>标签来替代</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;情景&quot;&gt;&lt;a href=&quot;#情景&quot; class=&quot;headerlink&quot; title=&quot;情景&quot;&gt;&lt;/a&gt;情景&lt;/h2&gt;&lt;p&gt;在下面的情况下点击&lt;code&gt;&amp;lt;input type=image&amp;gt;&lt;/code&gt;来会直接提交表单&lt;br&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://tianqingdian.github.io/categories/HTML/"/>
    
    
      <category term="input" scheme="https://tianqingdian.github.io/tags/input/"/>
    
      <category term="image" scheme="https://tianqingdian.github.io/tags/image/"/>
    
      <category term="表单" scheme="https://tianqingdian.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>获取option的自定义属性的值</title>
    <link href="https://tianqingdian.github.io//blogs/year/12/12/%E8%8E%B7%E5%8F%96option%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC/"/>
    <id>https://tianqingdian.github.io//blogs/year/12/12/获取option的自定义属性的值/</id>
    <published>2017-12-12T06:46:49.000Z</published>
    <updated>2017-12-12T07:13:32.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html部分"><a href="#html部分" class="headerlink" title="html部分:"></a>html部分:</h3><a id="more"></a><pre><code>&lt;select name=&quot;zdyqz&quot; class=&quot;zdyqz&quot; id =&quot;zdyqz&quot;&gt;     &lt;c:forEach items=&quot;${userList }&quot; var=&quot;user&quot; varStatus=&quot;vs&quot;&gt;         &lt;option value=&quot;${user.userId }&quot; parentcode=&quot;${user.code }&quot;&gt;${user.userName }&lt;/option&gt;      &lt;/c:forEach&gt;&lt;/select&gt;</code></pre><h3 id="js部分"><a href="#js部分" class="headerlink" title="js部分:"></a>js部分:</h3><pre><code>document.getElementById(&apos;zdyqz&apos;).onchange=function (){    var code= $(this).find(&quot;option:selected&quot;).attr(&quot;parentcode&quot;);    alert(code);};</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;html部分&quot;&gt;&lt;a href=&quot;#html部分&quot; class=&quot;headerlink&quot; title=&quot;html部分:&quot;&gt;&lt;/a&gt;html部分:&lt;/h3&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://tianqingdian.github.io/categories/HTML/"/>
    
    
      <category term="自定义" scheme="https://tianqingdian.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
      <category term="属性" scheme="https://tianqingdian.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="取值" scheme="https://tianqingdian.github.io/tags/%E5%8F%96%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="https://tianqingdian.github.io//blogs/year/12/11/git%E5%91%BD%E4%BB%A4/"/>
    <id>https://tianqingdian.github.io//blogs/year/12/11/git命令/</id>
    <published>2017-12-11T05:42:38.000Z</published>
    <updated>2017-12-13T03:29:32.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h3><a id="more"></a><p>集中式：(SVN，CVS)</p><ul><li>工作前都需要把最新代码从中央库 Pull 下来。工作完成然后再 Push 到中央库中，意味着必须联网。受网络限制，并且不安全</li></ul><p>分布式：(Git，BitKeeper)</p><ul><li>每一台终端都是一个中央服务器。代码保存在本地，十分灵活。</li></ul><hr><h3 id="时光穿梭"><a href="#时光穿梭" class="headerlink" title="时光穿梭"></a>时光穿梭</h3><h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git add file</td><td style="text-align:center">文件添加到暂存区。可反复多次使用，添加多个文件到暂存区</td></tr><tr><td style="text-align:center">git commit -m “description”</td><td style="text-align:center"><code>-m</code>后面输入的是本次提交的说明。可以一次提交多个文件到当前分支</td></tr><tr><td style="text-align:center">git status</td><td style="text-align:center">查看当前目录的状态</td></tr><tr><td style="text-align:center">git diff</td><td style="text-align:center">查看修改内容</td></tr></tbody></table><hr><h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git log (–pretty=oneline)</td><td style="text-align:center">当前文件所有历史版本</td></tr><tr><td style="text-align:center">cat file</td><td style="text-align:center">查看文件内容</td></tr><tr><td style="text-align:center">git reflog</td><td style="text-align:center">查看每一次提交的id</td></tr><tr><td style="text-align:center">git reset –hard commit_id</td><td style="text-align:center">回到某一版本。HEAD 就是当前版本</td></tr></tbody></table><hr><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git checkout – file</td><td style="text-align:center">丢弃工作区修改。回到最近一次<code>git commit</code>或<code>git add</code>时的状态</td></tr><tr><td style="text-align:center">git reset HEAD file</td><td style="text-align:center">把暂存区的修改撤销掉</td></tr></tbody></table><hr><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git rm file</td><td style="text-align:center">删除文件。删除后可以借助 git checkout 恢复文件到版本库中存在的文件的最新版本</td></tr></tbody></table><hr><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git remote add origin [url]</td><td style="text-align:center">关联一个远程库</td></tr><tr><td style="text-align:center">git push -u origin master</td><td style="text-align:center">第一次推送master分支的所有内容</td></tr><tr><td style="text-align:center">git push origin master</td><td style="text-align:center">第一次之后每次推送最新修改。推送dev分支到远程origin分支</td></tr></tbody></table><hr><h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git clone [url]</td><td style="text-align:center">https协议克隆一个仓库。速度慢</td></tr><tr><td style="text-align:center">git clone git@github.com:[用户名]/[仓库名].git</td><td style="text-align:center"><code>ssh</code>支持的原生<code>git</code>协议。克隆一个仓库</td></tr></tbody></table><hr><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git checkout -b [分支名称]</td><td style="text-align:center">创建加切换到分支</td></tr><tr><td style="text-align:center">git branch [分支名称]</td><td style="text-align:center">创建分支</td></tr><tr><td style="text-align:center">git checkout [分支名称]</td><td style="text-align:center">切换到分支</td></tr><tr><td style="text-align:center">git branch</td><td style="text-align:center">查看分支</td></tr><tr><td style="text-align:center">git merge [分支名称]</td><td style="text-align:center">合并指定分支到当前分支</td></tr><tr><td style="text-align:center">git branch -d [分支名称]</td><td style="text-align:center">删除指定分支(确保当前不在此分支上)</td></tr></tbody></table><hr><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>双方修改同一文件的不同地方不会触发。相反修改同一文件的同一地方才会触发。各自修改提交后，合并时就会出现冲突。我们切换到主分支下，对文件进行最终修改后。再进行提交即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFLICT (content): Merge conflict in [文件名称]</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git log –graph</td><td style="text-align:center">可以看到分支合并图</td></tr></tbody></table><hr><h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git merge –no-ff -m “描述” [分支名称]</td><td style="text-align:center">合并分支时，强制禁用Fast forward模式。此时Git就会在merge时生成一个新的commit。所以需要加上-m参数</td></tr></tbody></table><ul><li>加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>Fast Forward</code>合并看不出来曾经做过合并。</li></ul><p>分支策略： <code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活。干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本。你和你的团队每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。所以团队合作看起来就像这样：</p><p><img src="http://ww1.sinaimg.cn/large/006gmCthly1fja91noavhj30du03hjrf.jpg" alt=""></p><hr><h4 id="Bug-分支"><a href="#Bug-分支" class="headerlink" title="Bug 分支"></a>Bug 分支</h4><p>当某一天你在工作时，你的Boss告诉你你之前的代码出现了bug。需要你在一个小时内改完，可是你当前在dev上进行的工作暂时还没有完成没办法提交。预计还有很久的时间，可又必须在一个小时内改完bug。该怎么办：</p><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git stash</td><td style="text-align:center">可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</td></tr><tr><td style="text-align:center">git stash apply [stash@{0}]</td><td style="text-align:center">恢复指定的工作现场。stash 内容并不删除</td></tr><tr><td style="text-align:center">git stash drop [stash@{0}]</td><td style="text-align:center">删除指定 stash</td></tr><tr><td style="text-align:center">git stash pop</td><td style="text-align:center">恢复到前一工作现场。并删除该 stash</td></tr></tbody></table><p><strong>注意：</strong></p><p>首先确定要在哪个分支上修复 bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支<code>issue-101</code>。修复完成后，再切换回<code>master</code>分支进行合并。最后删除<code>issue-101</code>分支。在不同分支上进行修复，工作区中看到的代码不一定是相同的，需要确保这一点。并且在不同分支上进行修复后，最后会合并到该分支上。如果代码要最终发布，你需要再将你分之上的代码<code>merge</code>到<code>master</code>分支上。</p><hr><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p><strong>注意：</strong></p><p>合作开发新功能时，最好在一个新的分支上进行新功能的开发，而不去污染主分支。当该功能开发好之后再去合并到主分支即可。</p><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git remote -v</td><td style="text-align:center">查看远程库的详细信息。( fetch，push 抓取和推送的<code>origin</code>的地址 )</td></tr><tr><td style="text-align:center">git push origin [分支名称]</td><td style="text-align:center">推送该分支的本地内容到远程库的分支上。</td></tr></tbody></table><p><strong>注意：</strong></p><p>这里还有一个学问就是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步<ul><li>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</li></ul></li><li><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug</li><li><code>feature</code>分支是否推到远程，取决于你是否和你的同班合作在上面开发</li></ul><table><thead><tr><th style="text-align:center">命令组</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">git checkout -b branch-name origin/branch-name</td><td style="text-align:center">在本地创建和远程分支对应的分支</td></tr><tr><td style="text-align:center">git branch –set-upstream branch-name origin/branch-name</td><td style="text-align:center">建立本地分支和远程分支的关联</td></tr><tr><td style="text-align:center">git push origin branch-name</td><td style="text-align:center">本地新建的分支如果不推送到远程，对其他人就是不可见的，  从本地推送分支到远程(会让你输github的用户名和密码)。</td></tr></tbody></table><p>多人协作的工作模式通常是这样：</p><ol><li>首先从远程库clone下项目，然后在本地创建远程<code>origin</code>的<code>dev</code>分支到本地。然后就可以在<code>dev</code>分支上提交修改</li><li>然后可以试图用<code>git push origin branch-name</code>推送自己的修改</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>拉取下来最新的提交，如果拉取失败则是因为远程的分支与本地的分支没有建立链接。设置好后再<code>git pull</code>进行合并</li><li>如果合并有冲突，则解决冲突，并在本地提交</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;版本控制系统&quot;&gt;&lt;a href=&quot;#版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;版本控制系统&quot;&gt;&lt;/a&gt;版本控制系统&lt;/h3&gt;
    
    </summary>
    
      <category term="Git" scheme="https://tianqingdian.github.io/categories/Git/"/>
    
    
      <category term="命令" scheme="https://tianqingdian.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Git" scheme="https://tianqingdian.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>hexo命令</title>
    <link href="https://tianqingdian.github.io//blogs/year/11/11/hexo%E5%91%BD%E4%BB%A4/"/>
    <id>https://tianqingdian.github.io//blogs/year/11/11/hexo命令/</id>
    <published>2017-11-11T02:24:23.000Z</published>
    <updated>2017-12-13T03:29:18.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于hexo"><a href="#关于hexo" class="headerlink" title="关于hexo"></a>关于hexo</h3><a id="more"></a><ul><li>生产静态文件:<br><br><code>$ hexo generate</code></li><li>部署网站:<br><br><code>$ hexo deploy</code></li><li>清除缓存文件:<br><br><code>$ hexo clean</code></li><li>创建新的文章:<br><br><code>$ hexo new [layout] &lt;title&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于hexo&quot;&gt;&lt;a href=&quot;#关于hexo&quot; class=&quot;headerlink&quot; title=&quot;关于hexo&quot;&gt;&lt;/a&gt;关于hexo&lt;/h3&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://tianqingdian.github.io/categories/Hexo/"/>
    
    
      <category term="命令" scheme="https://tianqingdian.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Hexo" scheme="https://tianqingdian.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
