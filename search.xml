<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Jackson ObjectMapper类使用解析]]></title>
    <url>%2F%2Fblogs%2Fyear%2F12%2F22%2FJackson-ObjectMapper%E7%B1%BB%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[需求 利用ObjectMapper实现Json和bean的自由转换 实现代码: import java.io.IOException; import com.fasterxml.jackson.core.JsonParseException; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.ObjectMapper; public class JsonTest { public static void main(String args[]) { ObjectMapper mapper = new ObjectMapper(); String jsonString = &quot;{\&quot;name\&quot;:\&quot;Mahesh\&quot;, \&quot;age\&quot;:21}&quot;; // map json to student try { Student student = mapper.readValue(jsonString, Student.class); System.out.println(student); // 把对象转成json string类型的 jsonString = mapper.writeValueAsString(student); System.out.println(jsonString); } catch (JsonParseException e) { e.printStackTrace(); } catch (JsonMappingException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } //实体类 class Student { private String name; private int age; public Student() { } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String toString() { return &quot;Student [ name: &quot; + name + &quot;, age: &quot; + age + &quot; ]&quot;; } } 输出: Student [ name: Mahesh, age: 21 ] {&quot;name&quot;:&quot;Mahesh&quot;,&quot;age&quot;:21}]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>ObjectMapper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jquery插件实现分页]]></title>
    <url>%2F%2Fblogs%2Fyear%2F12%2F22%2FJquery%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[这篇文章详细地介绍了前端的Jquery插件如何实现分页，需要的朋友可以参考下！ CSS部分page.css .page{ padding-left: 0; text-align: center; list-style: none; } .page&gt;li{ display: inline; padding: 5px 10px; cursor: pointer; } .page .pageItem{ border: solid thin #DDDDDD; margin: 5px; } .page .pageItemActive{ border: solid thin #0099FF; margin: 5px; background-color: #0099FF; color:white; } .page .pageItem:hover{ border: solid thin #0099FF; background-color: #0099FF; color:white; } .page .pageItemDisable{ border: solid thin #DDDDDD; margin: 5px; background-color: #DDDDDD; } 分页插件page.js var page = { &quot;pageId&quot; : &quot;&quot;, &quot;data&quot; : null, &quot;maxshowpageitem&quot; : 5,//最多显示的页码个数 &quot;pagelistcount&quot; : 10,//每一页显示的内容条数 &quot;init&quot; : function(listCount, currentPage, options) { this.pageId = options.id, this.data = options.data, this.maxshowpageitem = options.maxshowpageitem, //最多显示的页码个数 this.pagelistcount = options.pagelistcount//每一页显示的内容条数 page.initPage(listCount, currentPage); }, /** * 初始化数据处理 * @param listCount 列表总量 * @param currentPage 当前页 */ &quot;initPage&quot; : function(listCount, currentPage) { var maxshowpageitem = page.maxshowpageitem; if (maxshowpageitem != null &amp;&amp; maxshowpageitem &gt; 0 &amp;&amp; maxshowpageitem != &quot;&quot;) { page.maxshowpageitem = maxshowpageitem; } var pagelistcount = page.pagelistcount; if (pagelistcount != null &amp;&amp; pagelistcount &gt; 0 &amp;&amp; pagelistcount != &quot;&quot;) { page.pagelistcount = pagelistcount; } page.pagelistcount = pagelistcount; if (listCount &lt; 0) { listCount = 0; } if (currentPage &lt;= 0) { currentPage = 1; } page.setPageListCount(listCount, currentPage); }, /** * 初始化分页界面 * @param listCount 列表总量 */ &quot;initWithUl&quot; : function(listCount, currentPage) { var pageCount = 1; if (listCount &gt;= 0) { var pageCount = listCount % page.pagelistcount &gt; 0 ? parseInt(listCount / page.pagelistcount) + 1 : parseInt(listCount / page.pagelistcount); } var appendStr = page.getPageListModel(pageCount, currentPage); $(&quot;#&quot; + page.pageId).html(appendStr); }, /** * 设置列表总量和当前页码 * @param listCount 列表总量 * @param currentPage 当前页码 */ &quot;setPageListCount&quot; : function(listCount, currentPage) { listCount = parseInt(listCount); currentPage = parseInt(currentPage); page.initWithUl(listCount, currentPage); page.initPageEvent(listCount); page.viewPage(currentPage, listCount, page.pagelistcount, page.data) }, //页面显示功能 &quot;viewPage&quot; : function(currentPage, listCount, pagelistcount, data) { var NUM = listCount % pagelistcount == 0 ? listCount / pagelistcount : parseInt(listCount / pagelistcount) + 1; if (currentPage == NUM) { var result = data.slice((currentPage - 1) * pagelistcount,data.length); } else { var result = data.slice((currentPage - 1) * pagelistcount, (currentPage - 1) * pagelistcount + pagelistcount); } options.callBack(result); }, &quot;initPageEvent&quot; : function(listCount) { $(&quot;#&quot; + page.pageId + &quot;&gt;li[class=&apos;pageItem&apos;]&quot;).on(&quot;click&quot;, function() { page.setPageListCount(listCount, $(this).attr(&quot;page-data&quot;), page.fun); }); }, &quot;getPageListModel&quot; : function(pageCount, currentPage) { var prePage = currentPage - 1; var nextPage = currentPage + 1; var prePageClass = &quot;pageItem&quot;; var nextPageClass = &quot;pageItem&quot;; if (prePage &lt;= 0) { prePageClass = &quot;pageItemDisable&quot;; } if (nextPage &gt; pageCount) { nextPageClass = &quot;pageItemDisable&quot;; } var appendStr = &quot;&quot;; appendStr += &quot;&lt;li class=&apos;&quot; + prePageClass + &quot;&apos; page-data=&apos;1&apos; page-rel=&apos;firstpage&apos;&gt;首页&lt;/li&gt;&quot;; appendStr += &quot;&lt;li class=&apos;&quot; + prePageClass + &quot;&apos; page-data=&apos;&quot; + prePage + &quot;&apos; page-rel=&apos;prepage&apos;&gt;&amp;lt;上一页&lt;/li&gt;&quot;; var miniPageNumber = 1; if (currentPage - parseInt(page.maxshowpageitem / 2) &gt; 0 &amp;&amp; currentPage + parseInt(page.maxshowpageitem / 2) &lt;= pageCount{ miniPageNumber = currentPage - parseInt(page.maxshowpageitem / 2); } else if (currentPage - parseInt(page.maxshowpageitem / 2) &gt; 0 &amp;&amp; currentPage + parseInt(page.maxshowpageitem / 2) &gt; pageCount) { miniPageNumber = pageCount - page.maxshowpageitem + 1; if (miniPageNumber &lt;= 0) { miniPageNumber = 1; } } var showPageNum = parseInt(page.maxshowpageitem); if (pageCount &lt; showPageNum) { showPageNum = pageCount; } for (var i = 0; i &lt; showPageNum; i++) { var pageNumber = miniPageNumber++; var itemPageClass = &quot;pageItem&quot;; if (pageNumber == currentPage) { itemPageClass = &quot;pageItemActive&quot;; } appendStr += &quot;&lt;li class=&apos;&quot; + itemPageClass + &quot;&apos; page-data=&apos;&quot; + pageNumber + &quot;&apos; page-rel=&apos;itempage&apos;&gt;&quot; + pageNumber + &quot;&lt;/li&gt;&quot;; } appendStr += &quot;&lt;li class=&apos;&quot; + nextPageClass + &quot;&apos; page-data=&apos;&quot; + nextPage + &quot;&apos; page-rel=&apos;nextpage&apos;&gt;下一页&amp;gt;&lt;/li&gt;&quot;; appendStr += &quot;&lt;li class=&apos;&quot; + nextPageClass + &quot;&apos; page-data=&apos;&quot; + pageCount + &quot;&apos; page-rel=&apos;lastpage&apos;&gt;尾页&lt;/li&gt;&quot;; return appendStr; } } html部分page.html &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;ECharts&lt;/title&gt; &lt;!-- 引入 echarts.js --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/gongchang-style.css&quot; /&gt; &lt;link href=&quot;css/page.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&gt; &lt;script src=&quot;http://www.jq22.com/jquery/jquery-1.10.2.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/page.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/echarts.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 数据渲染 --&gt; &lt;div&gt; &lt;!-- thead --&gt; &lt;div class=&quot;grid-header&quot; id=&quot;grid1&quot;&gt; &lt;span class=&quot;row-1&quot;&gt;姓名&lt;/span&gt; &lt;span class=&quot;row-1&quot;&gt;年龄&lt;/span&gt; &lt;span class=&quot;row-1&quot;&gt;性别&lt;/span&gt; &lt;span class=&quot;row-1&quot;&gt;手机号码&lt;/span&gt; &lt;span class=&quot;row-1&quot;&gt;居住地址&lt;/span&gt; &lt;/div&gt; &lt;!-- tbody --&gt; &lt;div class=&quot;grid-body&quot;&gt;&lt;/div&gt; &lt;!--分页插件--&gt; &lt;div class=&quot;page&quot; id=&quot;page&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var options; /**初始函数 * [initdata description] * @return {[type]} [description] */ function initdata(){ alert(&quot;init&quot;); $.ajax({ type: &quot;get&quot;, url: &quot;http://localhost:8080/userInfo/getUserInfo&quot;, success: function(data, textStatus){ alert(data.userInfoList[1].username); if(data.status == 1){ var datas = data.userInfoList; alert(datas); options={ &quot;id&quot;:&quot;page&quot;,//显示页码的元素 &quot;data&quot;:datas,//显示数据 &quot;maxshowpageitem&quot;:5,//最多显示的页码个数 &quot;pagelistcount&quot;:3,//每页显示数据个数 &quot;callBack&quot;:function(result){ alert(result); var cHtml=&quot;&quot;; for(var i=0;i&lt;result.length;i++){ cHtml+=&apos;&lt;div class=&quot;grid-item&quot;&gt;\ &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].username+&apos;&lt;/span&gt;\ &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].age+&apos;&lt;/span&gt;\ &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].sex+&apos;&lt;/span&gt;\ &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].phone+&apos;&lt;/span&gt;\ &lt;span class=&quot;row-1&quot;&gt;&apos;+result[i].address+&apos;&lt;/span&gt;\ &lt;/div&gt;&apos; } $(&quot;.grid-body&quot;).html(cHtml); } }; page.init(datas.length,1,options); } }, complete: function(XMLHttpRequest, textStatus){ }, error: function(){ alert(&quot;请求网络失败！。。。。。。&quot;); } }); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 后台controller@RequestMapping(value = &quot;/getUserInfo&quot;, produces = &quot;application/json;charset=utf-8&quot;) public Map&lt;String,Object&gt; getUserInfo(HttpServletResponse response , @RequestParam(required=false,defaultValue=&quot;1&quot;) Integer pageNum, @RequestParam(required=false,defaultValue=&quot;3&quot;) Integer pageSize){ response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;); List&lt;UserInfo&gt; userList = userInfoService.getUserInfo(); Map&lt;String,Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;userInfoList&quot;,userList); map.put(&quot;status&quot;,1); return map; } 结束语 后台请求的接口应返回全部的数据（也就是Jquery插件需要的datas数据) 数据形式必须是json 数据渲染部分请根据需求自行拼写]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>jquery</tag>
        <tag>前端</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器后退刷新页面]]></title>
    <url>%2F%2Fblogs%2Fyear%2F12%2F14%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8E%E9%80%80%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[这篇文章介绍了几种浏览器后退按钮强制刷新页面的方法,需要的朋友可以参考下 方法一:1、 在页面中增加隐藏域 &lt;input type=&quot;hidden&quot; id=&quot;refreshed&quot; value=&quot;no&quot;&gt;2、 通过js设置和获取隐藏域值来自动刷新页面 onload=function(){ var e=document.getElementById(&quot;refreshed&quot;); if(e.value==&quot;no&quot;)e.value=&quot;yes&quot;; else{e.value=&quot;no&quot;;location.reload();} } 方法二:不使用隐藏域的js写法： if(window.name != &quot;bencalie&quot;){ location.reload(); window.name = &quot;bencalie&quot;; }else{ window.name = &quot;&quot;; } 方法三:禁止HTML头部缓存： &lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot;&gt; 方法四:jsp设置回退页的头部缓存： &lt;% response.setHeader(&quot;Cache-Control&quot;,&quot;no-store&quot;); response.setDateHeader(&quot;Expires&quot;, 0); response.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;); %&gt; 方法五:服务器设置头部缓存： response.setHeader( &quot;Pragma&quot;, &quot;no-cache&quot; );//不允许浏览器端或缓存服务器缓存当前页面信息。 response.setDateHeader(&quot;Expires&quot;, 0); response.addHeader( &quot;Cache-Control&quot;, &quot;no-cache&quot; );//浏览器和缓存服务器都不应该缓存页面信息 response.addHeader( &quot;Cache-Control&quot;, &quot;no-store&quot; );//请求和响应的信息都不应该被存储在对方的磁盘系统中； response.addHeader( &quot;Cache-Control&quot;, &quot;must-revalidate&quot; );//于客户机的每次请求，代理服务器必须想服务器验证缓存是否过时]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>刷新</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[标签事件自动提交表单]]></title>
    <url>%2F%2Fblogs%2Fyear%2F12%2F13%2Finput-type-image-%E6%A0%87%E7%AD%BE%E4%BA%8B%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[情景在下面的情况下点击&lt;input type=image&gt;来会直接提交表单 验证码: 登陆 解决 可以在&lt;input type=image&gt;标签中添加onclick在事件结束后添加return false；语句如下:&lt;input id=&quot;pcode&quot; type=&quot;image&quot; src=&quot;pcode.html&quot; onclick=&quot;code();return false；&quot;&gt; 如果不是必须要用&lt;input&gt;可以使用&lt;img&gt;标签来替代]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>input</tag>
        <tag>image</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取option的自定义属性的值]]></title>
    <url>%2F%2Fblogs%2Fyear%2F12%2F12%2F%E8%8E%B7%E5%8F%96option%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%2F</url>
    <content type="text"><![CDATA[html部分: &lt;select name=&quot;zdyqz&quot; class=&quot;zdyqz&quot; id =&quot;zdyqz&quot;&gt; &lt;c:forEach items=&quot;${userList }&quot; var=&quot;user&quot; varStatus=&quot;vs&quot;&gt; &lt;option value=&quot;${user.userId }&quot; parentcode=&quot;${user.code }&quot;&gt;${user.userName }&lt;/option&gt; &lt;/c:forEach&gt; &lt;/select&gt; js部分:document.getElementById(&apos;zdyqz&apos;).onchange=function (){ var code= $(this).find(&quot;option:selected&quot;).attr(&quot;parentcode&quot;); alert(code); };]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>自定义</tag>
        <tag>属性</tag>
        <tag>取值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令]]></title>
    <url>%2F%2Fblogs%2Fyear%2F12%2F11%2Fgit%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[版本控制系统 集中式：(SVN，CVS) 工作前都需要把最新代码从中央库 Pull 下来。工作完成然后再 Push 到中央库中，意味着必须联网。受网络限制，并且不安全 分布式：(Git，BitKeeper) 每一台终端都是一个中央服务器。代码保存在本地，十分灵活。 时光穿梭工作区和暂存区 命令组 意义 git add file 文件添加到暂存区。可反复多次使用，添加多个文件到暂存区 git commit -m “description” -m后面输入的是本次提交的说明。可以一次提交多个文件到当前分支 git status 查看当前目录的状态 git diff 查看修改内容 管理修改 命令组 意义 git log (–pretty=oneline) 当前文件所有历史版本 cat file 查看文件内容 git reflog 查看每一次提交的id git reset –hard commit_id 回到某一版本。HEAD 就是当前版本 撤销修改 命令组 意义 git checkout – file 丢弃工作区修改。回到最近一次git commit或git add时的状态 git reset HEAD file 把暂存区的修改撤销掉 删除文件 命令组 意义 git rm file 删除文件。删除后可以借助 git checkout 恢复文件到版本库中存在的文件的最新版本 远程仓库添加远程仓库 命令组 意义 git remote add origin [url] 关联一个远程库 git push -u origin master 第一次推送master分支的所有内容 git push origin master 第一次之后每次推送最新修改。推送dev分支到远程origin分支 从远程仓库克隆 命令组 意义 git clone [url] https协议克隆一个仓库。速度慢 git clone git@github.com:[用户名]/[仓库名].git ssh支持的原生git协议。克隆一个仓库 分支管理创建与合并分支 命令组 意义 git checkout -b [分支名称] 创建加切换到分支 git branch [分支名称] 创建分支 git checkout [分支名称] 切换到分支 git branch 查看分支 git merge [分支名称] 合并指定分支到当前分支 git branch -d [分支名称] 删除指定分支(确保当前不在此分支上) 解决冲突双方修改同一文件的不同地方不会触发。相反修改同一文件的同一地方才会触发。各自修改提交后，合并时就会出现冲突。我们切换到主分支下，对文件进行最终修改后。再进行提交即可 12CONFLICT (content): Merge conflict in [文件名称]Automatic merge failed; fix conflicts and then commit the result. 命令组 意义 git log –graph 可以看到分支合并图 分支管理策略 命令组 意义 git merge –no-ff -m “描述” [分支名称] 合并分支时，强制禁用Fast forward模式。此时Git就会在merge时生成一个新的commit。所以需要加上-m参数 加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而Fast Forward合并看不出来曾经做过合并。 分支策略： master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活。干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本。你和你的团队每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。所以团队合作看起来就像这样： Bug 分支当某一天你在工作时，你的Boss告诉你你之前的代码出现了bug。需要你在一个小时内改完，可是你当前在dev上进行的工作暂时还没有完成没办法提交。预计还有很久的时间，可又必须在一个小时内改完bug。该怎么办： 命令组 意义 git stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作 git stash apply [stash@{0}] 恢复指定的工作现场。stash 内容并不删除 git stash drop [stash@{0}] 删除指定 stash git stash pop 恢复到前一工作现场。并删除该 stash 注意： 首先确定要在哪个分支上修复 bug，假定需要在master分支上修复，就从master创建临时分支issue-101。修复完成后，再切换回master分支进行合并。最后删除issue-101分支。在不同分支上进行修复，工作区中看到的代码不一定是相同的，需要确保这一点。并且在不同分支上进行修复后，最后会合并到该分支上。如果代码要最终发布，你需要再将你分之上的代码merge到master分支上。 多人协作注意： 合作开发新功能时，最好在一个新的分支上进行新功能的开发，而不去污染主分支。当该功能开发好之后再去合并到主分支即可。 命令组 意义 git remote -v 查看远程库的详细信息。( fetch，push 抓取和推送的origin的地址 ) git push origin [分支名称] 推送该分支的本地内容到远程库的分支上。 注意： 这里还有一个学问就是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？ master分支是主分支，因此要时刻与远程同步 dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步 多人协作时，大家都会往master和dev分支上推送各自的修改。 bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug feature分支是否推到远程，取决于你是否和你的同班合作在上面开发 命令组 意义 git checkout -b branch-name origin/branch-name 在本地创建和远程分支对应的分支 git branch –set-upstream branch-name origin/branch-name 建立本地分支和远程分支的关联 git push origin branch-name 本地新建的分支如果不推送到远程，对其他人就是不可见的， 从本地推送分支到远程(会让你输github的用户名和密码)。 多人协作的工作模式通常是这样： 首先从远程库clone下项目，然后在本地创建远程origin的dev分支到本地。然后就可以在dev分支上提交修改 然后可以试图用git push origin branch-name推送自己的修改 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull拉取下来最新的提交，如果拉取失败则是因为远程的分支与本地的分支没有建立链接。设置好后再git pull进行合并 如果合并有冲突，则解决冲突，并在本地提交 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo命令]]></title>
    <url>%2F%2Fblogs%2Fyear%2F11%2F11%2Fhexo%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[关于hexo 生产静态文件:$ hexo generate 部署网站:$ hexo deploy 清除缓存文件:$ hexo clean 创建新的文章:$ hexo new [layout] &lt;title&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
